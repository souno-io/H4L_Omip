# Generated by Django 4.0.8 on 2023-02-03 07:42

import common.utils
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('system', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HISDepartment',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('code', models.IntegerField(help_text='科室代码,同步HIS系统gy_ksdm.ksdm', unique=True, verbose_name='科室代码')),
                ('name', models.CharField(help_text='科室名称', max_length=50, verbose_name='科室名称')),
                ('alias', models.CharField(blank=True, help_text='科室别名', max_length=50, null=True, verbose_name='科室别名')),
                ('parent_code', models.IntegerField(default=0, help_text='上级科室', verbose_name='上级科室')),
                ('is_outpatient', models.BooleanField(default=False, help_text='是否是门诊科室', verbose_name='门诊使用')),
                ('is_technology', models.BooleanField(default=False, help_text='是否是医技科室', verbose_name='医技使用')),
                ('is_inpatient', models.BooleanField(default=False, help_text='是否是住院科室', verbose_name='住院使用')),
                ('is_ward', models.BooleanField(default=False, help_text='是否是病区科室', verbose_name='病区使用')),
                ('is_consultation', models.BooleanField(default=False, help_text='是否是会诊使用', verbose_name='会诊使用')),
                ('rated_bed', models.IntegerField(default=0, help_text='病区额定床位数', verbose_name='额定床位数')),
                ('sort', models.CharField(blank=True, help_text='排序顺序', max_length=10, null=True, verbose_name='排序顺序')),
                ('national_code', models.CharField(blank=True, help_text='国临版科室代码', max_length=20, null=True, verbose_name='国临版科室代码')),
                ('national_name', models.CharField(blank=True, help_text='国临版科室名称', max_length=50, null=True, verbose_name='国临版科室名称')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'HIS科室',
                'verbose_name_plural': 'HIS科室',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='HISEmployee',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('code', models.CharField(help_text='员工代码,同步HIS系统gy_ygdm.ygdm', max_length=255, unique=True, verbose_name='员工代码')),
                ('num', models.CharField(help_text='员工编号,同步HIS系统gy_ygdm.ygbh', max_length=255, unique=True, verbose_name='员工编号')),
                ('name', models.CharField(help_text='员工姓名', max_length=30, verbose_name='姓名')),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女'), (3, '其他'), (9, '未说明')], help_text='性别：1：男，2：女,9：未说明', verbose_name='性别')),
                ('identity', models.CharField(blank=True, help_text='身份证号,同步HIS系统gy_ygdm.sfzh', max_length=25, null=True, verbose_name='身份证号')),
                ('nhic', models.CharField(blank=True, help_text='国家医保编码,同步HIS系统gy_ygdm.gjybysbm', max_length=25, null=True, verbose_name='国家医保编码')),
                ('department', models.IntegerField(blank=True, help_text='所属科室代码，同步gy_ygdm.ksdm', null=True, verbose_name='科室代码')),
                ('is_specialist', models.BooleanField(default=False, help_text='是否专家', verbose_name='是否专家')),
                ('antibiotic_rights', models.BooleanField(default=False, help_text='抗生药权', verbose_name='抗生药权')),
                ('prescription_rights', models.BooleanField(default=False, help_text='开处方权', verbose_name='开处方权')),
                ('narcotics_rights', models.BooleanField(default=False, help_text='麻醉药权', verbose_name='麻醉药权')),
                ('psychotropic_rights', models.BooleanField(default=False, help_text='精神药权', verbose_name='精神药权')),
                ('phone', models.CharField(blank=True, help_text='手机号码', max_length=25, null=True, unique=True, verbose_name='手机号码')),
                ('signature', models.BinaryField(blank=True, help_text='签名图片', null=True, verbose_name='签名图片')),
                ('transfer_history', models.TextField(blank=True, help_text='转岗历史', null=True, verbose_name='转岗历史')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'HIS员工',
                'verbose_name_plural': 'HIS员工',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(help_text='姓名', max_length=60, verbose_name='Name of User')),
                ('id_card_no', models.CharField(blank=True, default=None, help_text='identity number', max_length=30, null=True, unique=True, verbose_name='identity number')),
                ('avatar', models.ImageField(blank=True, default='avatar/default.png', help_text='profile picture', null=True, upload_to=common.utils.PathAndRename('avatar/2023-02-03/'), verbose_name='profile picture')),
                ('email', models.EmailField(blank=True, default=None, help_text='Email address for login verification', max_length=50, null=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, default=None, help_text='Phone number for login verification', max_length=25, null=True, verbose_name='telephone number')),
                ('ding_userid', models.CharField(blank=True, default=None, help_text='钉钉用户ID', max_length=25, null=True, unique=True, verbose_name='钉钉用户ID')),
                ('wx_userid', models.CharField(blank=True, default=None, help_text='微信用户ID', max_length=25, null=True, unique=True, verbose_name='微信用户ID')),
                ('signature', models.CharField(blank=True, help_text='personal signature', max_length=255, null=True, verbose_name='personal signature')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='状态说明字段', verbose_name='激活状态')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('employee_num', models.OneToOneField(blank=True, help_text='与HIS绑定的工号信息!', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.hisemployee', verbose_name='绑定工号')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_competences', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_competences', related_query_name='user', to='system.competence', verbose_name='前端权限')),
                ('user_departments', models.ForeignKey(blank=True, help_text='The Departments this user belongs to. A user will get all permissions granted to each of their Departments.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_departments', related_query_name='user', to='system.department', verbose_name='Departments')),
                ('user_menus', models.ManyToManyField(blank=True, help_text='Specific menus for this user.', related_name='user_menus', related_query_name='user', to='system.menu', verbose_name='前端菜单')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_roles', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_roles', related_query_name='user', to='system.role', verbose_name='前端角色')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
